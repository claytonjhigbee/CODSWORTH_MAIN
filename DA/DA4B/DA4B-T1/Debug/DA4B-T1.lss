
DA4B-T1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000600  00000694  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000600  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  00800106  00800106  0000069a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000069a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  0000070c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b67  00000000  00000000  00000744  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a08  00000000  00000000  000012ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003fe  00000000  00000000  00001cb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  000020b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000506  00000000  00000000  00002124  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000011d  00000000  00000000  0000262a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00002747  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__vector_11>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e0 e0       	ldi	r30, 0x00	; 0
  c8:	f6 e0       	ldi	r31, 0x06	; 6
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a6 30       	cpi	r26, 0x06	; 6
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a6 e0       	ldi	r26, 0x06	; 6
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a4 32       	cpi	r26, 0x24	; 36
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 03 01 	call	0x206	; 0x206 <main>
  ea:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <__vector_11>:
}


/* Timer 1 Compare Interrupt Routine */
ISR(TIMER1_COMPA_vect)
{
  f2:	1f 92       	push	r1
  f4:	0f 92       	push	r0
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	0f 92       	push	r0
  fa:	11 24       	eor	r1, r1
  fc:	2f 93       	push	r18
  fe:	8f 93       	push	r24
 100:	9f 93       	push	r25
OVFCount++; // Increment overflow flag counter
 102:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <OVFCount>
 106:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <OVFCount+0x1>
 10a:	01 96       	adiw	r24, 0x01	; 1
 10c:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <OVFCount+0x1>
 110:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <OVFCount>
int count; // Initialize local counter
count = OVFCount; // Let local counter mimic global counter variable
 114:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <OVFCount>
 118:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <OVFCount+0x1>
// Step 1
if(count == 1){
 11c:	81 30       	cpi	r24, 0x01	; 1
 11e:	91 05       	cpc	r25, r1
 120:	19 f4       	brne	.+6      	; 0x128 <__vector_11+0x36>
	PORTD = 0xE;
 122:	2e e0       	ldi	r18, 0x0E	; 14
 124:	2b b9       	out	0x0b, r18	; 11
 126:	0c c0       	rjmp	.+24     	; 0x140 <__vector_11+0x4e>
}
// Step 2
if(count == 2) {
 128:	82 30       	cpi	r24, 0x02	; 2
 12a:	91 05       	cpc	r25, r1
 12c:	19 f4       	brne	.+6      	; 0x134 <__vector_11+0x42>
	PORTD = 0xC;
 12e:	2c e0       	ldi	r18, 0x0C	; 12
 130:	2b b9       	out	0x0b, r18	; 11
 132:	0c c0       	rjmp	.+24     	; 0x14c <__vector_11+0x5a>
}
// Step 3
if(count == 3) {
 134:	83 30       	cpi	r24, 0x03	; 3
 136:	91 05       	cpc	r25, r1
 138:	19 f4       	brne	.+6      	; 0x140 <__vector_11+0x4e>
	PORTD = 0xD;
 13a:	2d e0       	ldi	r18, 0x0D	; 13
 13c:	2b b9       	out	0x0b, r18	; 11
 13e:	0c c0       	rjmp	.+24     	; 0x158 <__vector_11+0x66>
}
// Step 4
if(count == 4) {
 140:	84 30       	cpi	r24, 0x04	; 4
 142:	91 05       	cpc	r25, r1
 144:	19 f4       	brne	.+6      	; 0x14c <__vector_11+0x5a>
	PORTD = 0x9;
 146:	29 e0       	ldi	r18, 0x09	; 9
 148:	2b b9       	out	0x0b, r18	; 11
 14a:	0c c0       	rjmp	.+24     	; 0x164 <__vector_11+0x72>
}
// Step 5
if(count == 5) {
 14c:	85 30       	cpi	r24, 0x05	; 5
 14e:	91 05       	cpc	r25, r1
 150:	19 f4       	brne	.+6      	; 0x158 <__vector_11+0x66>
	PORTD = 0xB;
 152:	2b e0       	ldi	r18, 0x0B	; 11
 154:	2b b9       	out	0x0b, r18	; 11
 156:	0c c0       	rjmp	.+24     	; 0x170 <__vector_11+0x7e>
}
// Step 6
if(count == 6) {
 158:	86 30       	cpi	r24, 0x06	; 6
 15a:	91 05       	cpc	r25, r1
 15c:	19 f4       	brne	.+6      	; 0x164 <__vector_11+0x72>
	PORTD = 0x3;
 15e:	83 e0       	ldi	r24, 0x03	; 3
 160:	8b b9       	out	0x0b, r24	; 11
 162:	0e c0       	rjmp	.+28     	; 0x180 <__vector_11+0x8e>
}
// Step 7
if(count == 7) {
 164:	87 30       	cpi	r24, 0x07	; 7
 166:	91 05       	cpc	r25, r1
 168:	19 f4       	brne	.+6      	; 0x170 <__vector_11+0x7e>
	PORTD = 0x7;
 16a:	87 e0       	ldi	r24, 0x07	; 7
 16c:	8b b9       	out	0x0b, r24	; 11
 16e:	08 c0       	rjmp	.+16     	; 0x180 <__vector_11+0x8e>
}
// Step 8
if(count == 8) {
 170:	08 97       	sbiw	r24, 0x08	; 8
 172:	31 f4       	brne	.+12     	; 0x180 <__vector_11+0x8e>
	PORTD = 0x6;
 174:	86 e0       	ldi	r24, 0x06	; 6
 176:	8b b9       	out	0x0b, r24	; 11
}
// Reset Counter if gone through all steps
if(count == 8){
	OVFCount = 0; // Restart Stepper Counter
 178:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <OVFCount+0x1>
 17c:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <OVFCount>
}
}
 180:	9f 91       	pop	r25
 182:	8f 91       	pop	r24
 184:	2f 91       	pop	r18
 186:	0f 90       	pop	r0
 188:	0f be       	out	0x3f, r0	; 63
 18a:	0f 90       	pop	r0
 18c:	1f 90       	pop	r1
 18e:	18 95       	reti

00000190 <adc_init>:

/* INIT ADC */
void adc_init(void)
{
	/** Setup and enable ADC **/
	ADMUX = (0<<REFS1)|    // Reference Selection Bits
 190:	80 e4       	ldi	r24, 0x40	; 64
 192:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	(1<<REFS0)|    // AVcc - external cap at AREF
	(0<<ADLAR)|    // ADC Left Adjust Result
	(0<<MUX2)|     // Analog Channel Selection Bits
	(0<<MUX1)|     // ADC0 (PC0 PIN23)
	(0<<MUX0);
	ADCSRA = (1<<ADEN)|    // ADC ENable
 196:	85 e8       	ldi	r24, 0x85	; 133
 198:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 19c:	08 95       	ret

0000019e <read_adc>:
}
/* READ ADC PINS */
void read_adc(void)
{
	unsigned char i = 4;
	adc_value = 0;
 19e:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <adc_value+0x1>
 1a2:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <adc_value>
 1a6:	24 e0       	ldi	r18, 0x04	; 4
	while (i--)
	{
		ADCSRA |= (1<<ADSC);
 1a8:	ea e7       	ldi	r30, 0x7A	; 122
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
		while(ADCSRA & (1<<ADSC));
		adc_value+= ADC;
 1ac:	a8 e7       	ldi	r26, 0x78	; 120
 1ae:	b0 e0       	ldi	r27, 0x00	; 0
{
	unsigned char i = 4;
	adc_value = 0;
	while (i--)
	{
		ADCSRA |= (1<<ADSC);
 1b0:	80 81       	ld	r24, Z
 1b2:	80 64       	ori	r24, 0x40	; 64
 1b4:	80 83       	st	Z, r24
		while(ADCSRA & (1<<ADSC));
 1b6:	80 81       	ld	r24, Z
 1b8:	86 fd       	sbrc	r24, 6
 1ba:	fd cf       	rjmp	.-6      	; 0x1b6 <read_adc+0x18>
		adc_value+= ADC;
 1bc:	4d 91       	ld	r20, X+
 1be:	5c 91       	ld	r21, X
 1c0:	11 97       	sbiw	r26, 0x01	; 1
 1c2:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <adc_value>
 1c6:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <adc_value+0x1>
 1ca:	84 0f       	add	r24, r20
 1cc:	95 1f       	adc	r25, r21
 1ce:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <adc_value+0x1>
 1d2:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <adc_value>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d6:	3f ef       	ldi	r19, 0xFF	; 255
 1d8:	80 e7       	ldi	r24, 0x70	; 112
 1da:	92 e0       	ldi	r25, 0x02	; 2
 1dc:	31 50       	subi	r19, 0x01	; 1
 1de:	80 40       	sbci	r24, 0x00	; 0
 1e0:	90 40       	sbci	r25, 0x00	; 0
 1e2:	e1 f7       	brne	.-8      	; 0x1dc <read_adc+0x3e>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <read_adc+0x48>
 1e6:	00 00       	nop
 1e8:	21 50       	subi	r18, 0x01	; 1
/* READ ADC PINS */
void read_adc(void)
{
	unsigned char i = 4;
	adc_value = 0;
	while (i--)
 1ea:	11 f7       	brne	.-60     	; 0x1b0 <read_adc+0x12>
		ADCSRA |= (1<<ADSC);
		while(ADCSRA & (1<<ADSC));
		adc_value+= ADC;
		_delay_ms(50);
	}
	adc_value = adc_value / 4;  // Average a few samples
 1ec:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <adc_value>
 1f0:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <adc_value+0x1>
 1f4:	96 95       	lsr	r25
 1f6:	87 95       	ror	r24
 1f8:	96 95       	lsr	r25
 1fa:	87 95       	ror	r24
 1fc:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <adc_value+0x1>
 200:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <adc_value>
 204:	08 95       	ret

00000206 <main>:
float c = 1699; // Needed offset for Affine Transformation
char outs[20];

int main(void)
{
    adc_init();             // Initialize the ADC
 206:	0e 94 c8 00 	call	0x190	; 0x190 <adc_init>
 20a:	2f e7       	ldi	r18, 0x7F	; 127
 20c:	8a e1       	ldi	r24, 0x1A	; 26
 20e:	96 e0       	ldi	r25, 0x06	; 6
 210:	21 50       	subi	r18, 0x01	; 1
 212:	80 40       	sbci	r24, 0x00	; 0
 214:	90 40       	sbci	r25, 0x00	; 0
 216:	e1 f7       	brne	.-8      	; 0x210 <main+0xa>
 218:	00 c0       	rjmp	.+0      	; 0x21a <main+0x14>
 21a:	00 00       	nop
	_delay_ms(125);         // wait a bit
	
	TCCR1B	|= (1<<WGM12)|(1<<CS11);
 21c:	e1 e8       	ldi	r30, 0x81	; 129
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	80 81       	ld	r24, Z
 222:	8a 60       	ori	r24, 0x0A	; 10
 224:	80 83       	st	Z, r24
	/*
	Turn on CTC Mode
	Set Prescalar to 8
	*/
	TIMSK1 |= (1<<OCIE1A);
 226:	ef e6       	ldi	r30, 0x6F	; 111
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	80 81       	ld	r24, Z
 22c:	82 60       	ori	r24, 0x02	; 2
 22e:	80 83       	st	Z, r24
	/*
	Turn on interrupt Mask for OCR1A
	*/
	OCR1A = start_value; // Initialize Timer at longest possible value, 20,000us
 230:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <start_value>
 234:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <start_value+0x1>
 238:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 23c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	sei(); 
 240:	78 94       	sei
	//Test of timer
	DDRD = 0xFF; // Set PortD as an output
 242:	8f ef       	ldi	r24, 0xFF	; 255
 244:	8a b9       	out	0x0a, r24	; 10
	OVFCount = 0; // Initialize global overflow counter
 246:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <OVFCount+0x1>
 24a:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <OVFCount>
		Affine Transformation
		PWM output = adc_value*(39999-1699)/(1024-0) + 1699
		*/
		float_value = adc_value;
		RPMvalue = (float_value*37.4033) + c;
		OCR1A = RPMvalue; // Load newest time measurement value
 24e:	c8 e8       	ldi	r28, 0x88	; 136
 250:	d0 e0       	ldi	r29, 0x00	; 0
	//Test of timer
	DDRD = 0xFF; // Set PortD as an output
	OVFCount = 0; // Initialize global overflow counter
    while (1) 
    {
		read_adc();
 252:	0e 94 cf 00 	call	0x19e	; 0x19e <read_adc>
		/*
		Affine Transformation
		PWM output = adc_value*(39999-1699)/(1024-0) + 1699
		*/
		float_value = adc_value;
 256:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <adc_value>
 25a:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <adc_value+0x1>
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	0e 94 03 02 	call	0x406	; 0x406 <__floatunsisf>
 266:	60 93 1c 01 	sts	0x011C, r22	; 0x80011c <float_value>
 26a:	70 93 1d 01 	sts	0x011D, r23	; 0x80011d <float_value+0x1>
 26e:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <float_value+0x2>
 272:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <float_value+0x3>
		RPMvalue = (float_value*37.4033) + c;
 276:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <float_value>
 27a:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <float_value+0x1>
 27e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <float_value+0x2>
 282:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <float_value+0x3>
 286:	2b ef       	ldi	r18, 0xFB	; 251
 288:	3c e9       	ldi	r19, 0x9C	; 156
 28a:	45 e1       	ldi	r20, 0x15	; 21
 28c:	52 e4       	ldi	r21, 0x42	; 66
 28e:	0e 94 91 02 	call	0x522	; 0x522 <__mulsf3>
 292:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 296:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 29a:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__data_start+0x2>
 29e:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__data_start+0x3>
 2a2:	0e 94 61 01 	call	0x2c2	; 0x2c2 <__addsf3>
 2a6:	0e 94 cd 01 	call	0x39a	; 0x39a <__fixsfsi>
 2aa:	70 93 23 01 	sts	0x0123, r23	; 0x800123 <RPMvalue+0x1>
 2ae:	60 93 22 01 	sts	0x0122, r22	; 0x800122 <RPMvalue>
		OCR1A = RPMvalue; // Load newest time measurement value
 2b2:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <RPMvalue>
 2b6:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <RPMvalue+0x1>
 2ba:	99 83       	std	Y+1, r25	; 0x01
 2bc:	88 83       	st	Y, r24
 2be:	c9 cf       	rjmp	.-110    	; 0x252 <main+0x4c>

000002c0 <__subsf3>:
 2c0:	50 58       	subi	r21, 0x80	; 128

000002c2 <__addsf3>:
 2c2:	bb 27       	eor	r27, r27
 2c4:	aa 27       	eor	r26, r26
 2c6:	0e 94 78 01 	call	0x2f0	; 0x2f0 <__addsf3x>
 2ca:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__fp_round>
 2ce:	0e 94 49 02 	call	0x492	; 0x492 <__fp_pscA>
 2d2:	38 f0       	brcs	.+14     	; 0x2e2 <__addsf3+0x20>
 2d4:	0e 94 50 02 	call	0x4a0	; 0x4a0 <__fp_pscB>
 2d8:	20 f0       	brcs	.+8      	; 0x2e2 <__addsf3+0x20>
 2da:	39 f4       	brne	.+14     	; 0x2ea <__addsf3+0x28>
 2dc:	9f 3f       	cpi	r25, 0xFF	; 255
 2de:	19 f4       	brne	.+6      	; 0x2e6 <__addsf3+0x24>
 2e0:	26 f4       	brtc	.+8      	; 0x2ea <__addsf3+0x28>
 2e2:	0c 94 46 02 	jmp	0x48c	; 0x48c <__fp_nan>
 2e6:	0e f4       	brtc	.+2      	; 0x2ea <__addsf3+0x28>
 2e8:	e0 95       	com	r30
 2ea:	e7 fb       	bst	r30, 7
 2ec:	0c 94 40 02 	jmp	0x480	; 0x480 <__fp_inf>

000002f0 <__addsf3x>:
 2f0:	e9 2f       	mov	r30, r25
 2f2:	0e 94 68 02 	call	0x4d0	; 0x4d0 <__fp_split3>
 2f6:	58 f3       	brcs	.-42     	; 0x2ce <__addsf3+0xc>
 2f8:	ba 17       	cp	r27, r26
 2fa:	62 07       	cpc	r22, r18
 2fc:	73 07       	cpc	r23, r19
 2fe:	84 07       	cpc	r24, r20
 300:	95 07       	cpc	r25, r21
 302:	20 f0       	brcs	.+8      	; 0x30c <__addsf3x+0x1c>
 304:	79 f4       	brne	.+30     	; 0x324 <__addsf3x+0x34>
 306:	a6 f5       	brtc	.+104    	; 0x370 <__addsf3x+0x80>
 308:	0c 94 8a 02 	jmp	0x514	; 0x514 <__fp_zero>
 30c:	0e f4       	brtc	.+2      	; 0x310 <__addsf3x+0x20>
 30e:	e0 95       	com	r30
 310:	0b 2e       	mov	r0, r27
 312:	ba 2f       	mov	r27, r26
 314:	a0 2d       	mov	r26, r0
 316:	0b 01       	movw	r0, r22
 318:	b9 01       	movw	r22, r18
 31a:	90 01       	movw	r18, r0
 31c:	0c 01       	movw	r0, r24
 31e:	ca 01       	movw	r24, r20
 320:	a0 01       	movw	r20, r0
 322:	11 24       	eor	r1, r1
 324:	ff 27       	eor	r31, r31
 326:	59 1b       	sub	r21, r25
 328:	99 f0       	breq	.+38     	; 0x350 <__addsf3x+0x60>
 32a:	59 3f       	cpi	r21, 0xF9	; 249
 32c:	50 f4       	brcc	.+20     	; 0x342 <__addsf3x+0x52>
 32e:	50 3e       	cpi	r21, 0xE0	; 224
 330:	68 f1       	brcs	.+90     	; 0x38c <__addsf3x+0x9c>
 332:	1a 16       	cp	r1, r26
 334:	f0 40       	sbci	r31, 0x00	; 0
 336:	a2 2f       	mov	r26, r18
 338:	23 2f       	mov	r18, r19
 33a:	34 2f       	mov	r19, r20
 33c:	44 27       	eor	r20, r20
 33e:	58 5f       	subi	r21, 0xF8	; 248
 340:	f3 cf       	rjmp	.-26     	; 0x328 <__addsf3x+0x38>
 342:	46 95       	lsr	r20
 344:	37 95       	ror	r19
 346:	27 95       	ror	r18
 348:	a7 95       	ror	r26
 34a:	f0 40       	sbci	r31, 0x00	; 0
 34c:	53 95       	inc	r21
 34e:	c9 f7       	brne	.-14     	; 0x342 <__addsf3x+0x52>
 350:	7e f4       	brtc	.+30     	; 0x370 <__addsf3x+0x80>
 352:	1f 16       	cp	r1, r31
 354:	ba 0b       	sbc	r27, r26
 356:	62 0b       	sbc	r22, r18
 358:	73 0b       	sbc	r23, r19
 35a:	84 0b       	sbc	r24, r20
 35c:	ba f0       	brmi	.+46     	; 0x38c <__addsf3x+0x9c>
 35e:	91 50       	subi	r25, 0x01	; 1
 360:	a1 f0       	breq	.+40     	; 0x38a <__addsf3x+0x9a>
 362:	ff 0f       	add	r31, r31
 364:	bb 1f       	adc	r27, r27
 366:	66 1f       	adc	r22, r22
 368:	77 1f       	adc	r23, r23
 36a:	88 1f       	adc	r24, r24
 36c:	c2 f7       	brpl	.-16     	; 0x35e <__addsf3x+0x6e>
 36e:	0e c0       	rjmp	.+28     	; 0x38c <__addsf3x+0x9c>
 370:	ba 0f       	add	r27, r26
 372:	62 1f       	adc	r22, r18
 374:	73 1f       	adc	r23, r19
 376:	84 1f       	adc	r24, r20
 378:	48 f4       	brcc	.+18     	; 0x38c <__addsf3x+0x9c>
 37a:	87 95       	ror	r24
 37c:	77 95       	ror	r23
 37e:	67 95       	ror	r22
 380:	b7 95       	ror	r27
 382:	f7 95       	ror	r31
 384:	9e 3f       	cpi	r25, 0xFE	; 254
 386:	08 f0       	brcs	.+2      	; 0x38a <__addsf3x+0x9a>
 388:	b0 cf       	rjmp	.-160    	; 0x2ea <__addsf3+0x28>
 38a:	93 95       	inc	r25
 38c:	88 0f       	add	r24, r24
 38e:	08 f0       	brcs	.+2      	; 0x392 <__addsf3x+0xa2>
 390:	99 27       	eor	r25, r25
 392:	ee 0f       	add	r30, r30
 394:	97 95       	ror	r25
 396:	87 95       	ror	r24
 398:	08 95       	ret

0000039a <__fixsfsi>:
 39a:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <__fixunssfsi>
 39e:	68 94       	set
 3a0:	b1 11       	cpse	r27, r1
 3a2:	0c 94 8b 02 	jmp	0x516	; 0x516 <__fp_szero>
 3a6:	08 95       	ret

000003a8 <__fixunssfsi>:
 3a8:	0e 94 70 02 	call	0x4e0	; 0x4e0 <__fp_splitA>
 3ac:	88 f0       	brcs	.+34     	; 0x3d0 <__fixunssfsi+0x28>
 3ae:	9f 57       	subi	r25, 0x7F	; 127
 3b0:	98 f0       	brcs	.+38     	; 0x3d8 <__fixunssfsi+0x30>
 3b2:	b9 2f       	mov	r27, r25
 3b4:	99 27       	eor	r25, r25
 3b6:	b7 51       	subi	r27, 0x17	; 23
 3b8:	b0 f0       	brcs	.+44     	; 0x3e6 <__fixunssfsi+0x3e>
 3ba:	e1 f0       	breq	.+56     	; 0x3f4 <__fixunssfsi+0x4c>
 3bc:	66 0f       	add	r22, r22
 3be:	77 1f       	adc	r23, r23
 3c0:	88 1f       	adc	r24, r24
 3c2:	99 1f       	adc	r25, r25
 3c4:	1a f0       	brmi	.+6      	; 0x3cc <__fixunssfsi+0x24>
 3c6:	ba 95       	dec	r27
 3c8:	c9 f7       	brne	.-14     	; 0x3bc <__fixunssfsi+0x14>
 3ca:	14 c0       	rjmp	.+40     	; 0x3f4 <__fixunssfsi+0x4c>
 3cc:	b1 30       	cpi	r27, 0x01	; 1
 3ce:	91 f0       	breq	.+36     	; 0x3f4 <__fixunssfsi+0x4c>
 3d0:	0e 94 8a 02 	call	0x514	; 0x514 <__fp_zero>
 3d4:	b1 e0       	ldi	r27, 0x01	; 1
 3d6:	08 95       	ret
 3d8:	0c 94 8a 02 	jmp	0x514	; 0x514 <__fp_zero>
 3dc:	67 2f       	mov	r22, r23
 3de:	78 2f       	mov	r23, r24
 3e0:	88 27       	eor	r24, r24
 3e2:	b8 5f       	subi	r27, 0xF8	; 248
 3e4:	39 f0       	breq	.+14     	; 0x3f4 <__fixunssfsi+0x4c>
 3e6:	b9 3f       	cpi	r27, 0xF9	; 249
 3e8:	cc f3       	brlt	.-14     	; 0x3dc <__fixunssfsi+0x34>
 3ea:	86 95       	lsr	r24
 3ec:	77 95       	ror	r23
 3ee:	67 95       	ror	r22
 3f0:	b3 95       	inc	r27
 3f2:	d9 f7       	brne	.-10     	; 0x3ea <__fixunssfsi+0x42>
 3f4:	3e f4       	brtc	.+14     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3f6:	90 95       	com	r25
 3f8:	80 95       	com	r24
 3fa:	70 95       	com	r23
 3fc:	61 95       	neg	r22
 3fe:	7f 4f       	sbci	r23, 0xFF	; 255
 400:	8f 4f       	sbci	r24, 0xFF	; 255
 402:	9f 4f       	sbci	r25, 0xFF	; 255
 404:	08 95       	ret

00000406 <__floatunsisf>:
 406:	e8 94       	clt
 408:	09 c0       	rjmp	.+18     	; 0x41c <__floatsisf+0x12>

0000040a <__floatsisf>:
 40a:	97 fb       	bst	r25, 7
 40c:	3e f4       	brtc	.+14     	; 0x41c <__floatsisf+0x12>
 40e:	90 95       	com	r25
 410:	80 95       	com	r24
 412:	70 95       	com	r23
 414:	61 95       	neg	r22
 416:	7f 4f       	sbci	r23, 0xFF	; 255
 418:	8f 4f       	sbci	r24, 0xFF	; 255
 41a:	9f 4f       	sbci	r25, 0xFF	; 255
 41c:	99 23       	and	r25, r25
 41e:	a9 f0       	breq	.+42     	; 0x44a <__floatsisf+0x40>
 420:	f9 2f       	mov	r31, r25
 422:	96 e9       	ldi	r25, 0x96	; 150
 424:	bb 27       	eor	r27, r27
 426:	93 95       	inc	r25
 428:	f6 95       	lsr	r31
 42a:	87 95       	ror	r24
 42c:	77 95       	ror	r23
 42e:	67 95       	ror	r22
 430:	b7 95       	ror	r27
 432:	f1 11       	cpse	r31, r1
 434:	f8 cf       	rjmp	.-16     	; 0x426 <__floatsisf+0x1c>
 436:	fa f4       	brpl	.+62     	; 0x476 <__floatsisf+0x6c>
 438:	bb 0f       	add	r27, r27
 43a:	11 f4       	brne	.+4      	; 0x440 <__floatsisf+0x36>
 43c:	60 ff       	sbrs	r22, 0
 43e:	1b c0       	rjmp	.+54     	; 0x476 <__floatsisf+0x6c>
 440:	6f 5f       	subi	r22, 0xFF	; 255
 442:	7f 4f       	sbci	r23, 0xFF	; 255
 444:	8f 4f       	sbci	r24, 0xFF	; 255
 446:	9f 4f       	sbci	r25, 0xFF	; 255
 448:	16 c0       	rjmp	.+44     	; 0x476 <__floatsisf+0x6c>
 44a:	88 23       	and	r24, r24
 44c:	11 f0       	breq	.+4      	; 0x452 <__floatsisf+0x48>
 44e:	96 e9       	ldi	r25, 0x96	; 150
 450:	11 c0       	rjmp	.+34     	; 0x474 <__floatsisf+0x6a>
 452:	77 23       	and	r23, r23
 454:	21 f0       	breq	.+8      	; 0x45e <__floatsisf+0x54>
 456:	9e e8       	ldi	r25, 0x8E	; 142
 458:	87 2f       	mov	r24, r23
 45a:	76 2f       	mov	r23, r22
 45c:	05 c0       	rjmp	.+10     	; 0x468 <__floatsisf+0x5e>
 45e:	66 23       	and	r22, r22
 460:	71 f0       	breq	.+28     	; 0x47e <__floatsisf+0x74>
 462:	96 e8       	ldi	r25, 0x86	; 134
 464:	86 2f       	mov	r24, r22
 466:	70 e0       	ldi	r23, 0x00	; 0
 468:	60 e0       	ldi	r22, 0x00	; 0
 46a:	2a f0       	brmi	.+10     	; 0x476 <__floatsisf+0x6c>
 46c:	9a 95       	dec	r25
 46e:	66 0f       	add	r22, r22
 470:	77 1f       	adc	r23, r23
 472:	88 1f       	adc	r24, r24
 474:	da f7       	brpl	.-10     	; 0x46c <__floatsisf+0x62>
 476:	88 0f       	add	r24, r24
 478:	96 95       	lsr	r25
 47a:	87 95       	ror	r24
 47c:	97 f9       	bld	r25, 7
 47e:	08 95       	ret

00000480 <__fp_inf>:
 480:	97 f9       	bld	r25, 7
 482:	9f 67       	ori	r25, 0x7F	; 127
 484:	80 e8       	ldi	r24, 0x80	; 128
 486:	70 e0       	ldi	r23, 0x00	; 0
 488:	60 e0       	ldi	r22, 0x00	; 0
 48a:	08 95       	ret

0000048c <__fp_nan>:
 48c:	9f ef       	ldi	r25, 0xFF	; 255
 48e:	80 ec       	ldi	r24, 0xC0	; 192
 490:	08 95       	ret

00000492 <__fp_pscA>:
 492:	00 24       	eor	r0, r0
 494:	0a 94       	dec	r0
 496:	16 16       	cp	r1, r22
 498:	17 06       	cpc	r1, r23
 49a:	18 06       	cpc	r1, r24
 49c:	09 06       	cpc	r0, r25
 49e:	08 95       	ret

000004a0 <__fp_pscB>:
 4a0:	00 24       	eor	r0, r0
 4a2:	0a 94       	dec	r0
 4a4:	12 16       	cp	r1, r18
 4a6:	13 06       	cpc	r1, r19
 4a8:	14 06       	cpc	r1, r20
 4aa:	05 06       	cpc	r0, r21
 4ac:	08 95       	ret

000004ae <__fp_round>:
 4ae:	09 2e       	mov	r0, r25
 4b0:	03 94       	inc	r0
 4b2:	00 0c       	add	r0, r0
 4b4:	11 f4       	brne	.+4      	; 0x4ba <__fp_round+0xc>
 4b6:	88 23       	and	r24, r24
 4b8:	52 f0       	brmi	.+20     	; 0x4ce <__fp_round+0x20>
 4ba:	bb 0f       	add	r27, r27
 4bc:	40 f4       	brcc	.+16     	; 0x4ce <__fp_round+0x20>
 4be:	bf 2b       	or	r27, r31
 4c0:	11 f4       	brne	.+4      	; 0x4c6 <__fp_round+0x18>
 4c2:	60 ff       	sbrs	r22, 0
 4c4:	04 c0       	rjmp	.+8      	; 0x4ce <__fp_round+0x20>
 4c6:	6f 5f       	subi	r22, 0xFF	; 255
 4c8:	7f 4f       	sbci	r23, 0xFF	; 255
 4ca:	8f 4f       	sbci	r24, 0xFF	; 255
 4cc:	9f 4f       	sbci	r25, 0xFF	; 255
 4ce:	08 95       	ret

000004d0 <__fp_split3>:
 4d0:	57 fd       	sbrc	r21, 7
 4d2:	90 58       	subi	r25, 0x80	; 128
 4d4:	44 0f       	add	r20, r20
 4d6:	55 1f       	adc	r21, r21
 4d8:	59 f0       	breq	.+22     	; 0x4f0 <__fp_splitA+0x10>
 4da:	5f 3f       	cpi	r21, 0xFF	; 255
 4dc:	71 f0       	breq	.+28     	; 0x4fa <__fp_splitA+0x1a>
 4de:	47 95       	ror	r20

000004e0 <__fp_splitA>:
 4e0:	88 0f       	add	r24, r24
 4e2:	97 fb       	bst	r25, 7
 4e4:	99 1f       	adc	r25, r25
 4e6:	61 f0       	breq	.+24     	; 0x500 <__fp_splitA+0x20>
 4e8:	9f 3f       	cpi	r25, 0xFF	; 255
 4ea:	79 f0       	breq	.+30     	; 0x50a <__fp_splitA+0x2a>
 4ec:	87 95       	ror	r24
 4ee:	08 95       	ret
 4f0:	12 16       	cp	r1, r18
 4f2:	13 06       	cpc	r1, r19
 4f4:	14 06       	cpc	r1, r20
 4f6:	55 1f       	adc	r21, r21
 4f8:	f2 cf       	rjmp	.-28     	; 0x4de <__fp_split3+0xe>
 4fa:	46 95       	lsr	r20
 4fc:	f1 df       	rcall	.-30     	; 0x4e0 <__fp_splitA>
 4fe:	08 c0       	rjmp	.+16     	; 0x510 <__fp_splitA+0x30>
 500:	16 16       	cp	r1, r22
 502:	17 06       	cpc	r1, r23
 504:	18 06       	cpc	r1, r24
 506:	99 1f       	adc	r25, r25
 508:	f1 cf       	rjmp	.-30     	; 0x4ec <__fp_splitA+0xc>
 50a:	86 95       	lsr	r24
 50c:	71 05       	cpc	r23, r1
 50e:	61 05       	cpc	r22, r1
 510:	08 94       	sec
 512:	08 95       	ret

00000514 <__fp_zero>:
 514:	e8 94       	clt

00000516 <__fp_szero>:
 516:	bb 27       	eor	r27, r27
 518:	66 27       	eor	r22, r22
 51a:	77 27       	eor	r23, r23
 51c:	cb 01       	movw	r24, r22
 51e:	97 f9       	bld	r25, 7
 520:	08 95       	ret

00000522 <__mulsf3>:
 522:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3x>
 526:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__fp_round>
 52a:	0e 94 49 02 	call	0x492	; 0x492 <__fp_pscA>
 52e:	38 f0       	brcs	.+14     	; 0x53e <__mulsf3+0x1c>
 530:	0e 94 50 02 	call	0x4a0	; 0x4a0 <__fp_pscB>
 534:	20 f0       	brcs	.+8      	; 0x53e <__mulsf3+0x1c>
 536:	95 23       	and	r25, r21
 538:	11 f0       	breq	.+4      	; 0x53e <__mulsf3+0x1c>
 53a:	0c 94 40 02 	jmp	0x480	; 0x480 <__fp_inf>
 53e:	0c 94 46 02 	jmp	0x48c	; 0x48c <__fp_nan>
 542:	11 24       	eor	r1, r1
 544:	0c 94 8b 02 	jmp	0x516	; 0x516 <__fp_szero>

00000548 <__mulsf3x>:
 548:	0e 94 68 02 	call	0x4d0	; 0x4d0 <__fp_split3>
 54c:	70 f3       	brcs	.-36     	; 0x52a <__mulsf3+0x8>

0000054e <__mulsf3_pse>:
 54e:	95 9f       	mul	r25, r21
 550:	c1 f3       	breq	.-16     	; 0x542 <__mulsf3+0x20>
 552:	95 0f       	add	r25, r21
 554:	50 e0       	ldi	r21, 0x00	; 0
 556:	55 1f       	adc	r21, r21
 558:	62 9f       	mul	r22, r18
 55a:	f0 01       	movw	r30, r0
 55c:	72 9f       	mul	r23, r18
 55e:	bb 27       	eor	r27, r27
 560:	f0 0d       	add	r31, r0
 562:	b1 1d       	adc	r27, r1
 564:	63 9f       	mul	r22, r19
 566:	aa 27       	eor	r26, r26
 568:	f0 0d       	add	r31, r0
 56a:	b1 1d       	adc	r27, r1
 56c:	aa 1f       	adc	r26, r26
 56e:	64 9f       	mul	r22, r20
 570:	66 27       	eor	r22, r22
 572:	b0 0d       	add	r27, r0
 574:	a1 1d       	adc	r26, r1
 576:	66 1f       	adc	r22, r22
 578:	82 9f       	mul	r24, r18
 57a:	22 27       	eor	r18, r18
 57c:	b0 0d       	add	r27, r0
 57e:	a1 1d       	adc	r26, r1
 580:	62 1f       	adc	r22, r18
 582:	73 9f       	mul	r23, r19
 584:	b0 0d       	add	r27, r0
 586:	a1 1d       	adc	r26, r1
 588:	62 1f       	adc	r22, r18
 58a:	83 9f       	mul	r24, r19
 58c:	a0 0d       	add	r26, r0
 58e:	61 1d       	adc	r22, r1
 590:	22 1f       	adc	r18, r18
 592:	74 9f       	mul	r23, r20
 594:	33 27       	eor	r19, r19
 596:	a0 0d       	add	r26, r0
 598:	61 1d       	adc	r22, r1
 59a:	23 1f       	adc	r18, r19
 59c:	84 9f       	mul	r24, r20
 59e:	60 0d       	add	r22, r0
 5a0:	21 1d       	adc	r18, r1
 5a2:	82 2f       	mov	r24, r18
 5a4:	76 2f       	mov	r23, r22
 5a6:	6a 2f       	mov	r22, r26
 5a8:	11 24       	eor	r1, r1
 5aa:	9f 57       	subi	r25, 0x7F	; 127
 5ac:	50 40       	sbci	r21, 0x00	; 0
 5ae:	9a f0       	brmi	.+38     	; 0x5d6 <__mulsf3_pse+0x88>
 5b0:	f1 f0       	breq	.+60     	; 0x5ee <__mulsf3_pse+0xa0>
 5b2:	88 23       	and	r24, r24
 5b4:	4a f0       	brmi	.+18     	; 0x5c8 <__mulsf3_pse+0x7a>
 5b6:	ee 0f       	add	r30, r30
 5b8:	ff 1f       	adc	r31, r31
 5ba:	bb 1f       	adc	r27, r27
 5bc:	66 1f       	adc	r22, r22
 5be:	77 1f       	adc	r23, r23
 5c0:	88 1f       	adc	r24, r24
 5c2:	91 50       	subi	r25, 0x01	; 1
 5c4:	50 40       	sbci	r21, 0x00	; 0
 5c6:	a9 f7       	brne	.-22     	; 0x5b2 <__mulsf3_pse+0x64>
 5c8:	9e 3f       	cpi	r25, 0xFE	; 254
 5ca:	51 05       	cpc	r21, r1
 5cc:	80 f0       	brcs	.+32     	; 0x5ee <__mulsf3_pse+0xa0>
 5ce:	0c 94 40 02 	jmp	0x480	; 0x480 <__fp_inf>
 5d2:	0c 94 8b 02 	jmp	0x516	; 0x516 <__fp_szero>
 5d6:	5f 3f       	cpi	r21, 0xFF	; 255
 5d8:	e4 f3       	brlt	.-8      	; 0x5d2 <__mulsf3_pse+0x84>
 5da:	98 3e       	cpi	r25, 0xE8	; 232
 5dc:	d4 f3       	brlt	.-12     	; 0x5d2 <__mulsf3_pse+0x84>
 5de:	86 95       	lsr	r24
 5e0:	77 95       	ror	r23
 5e2:	67 95       	ror	r22
 5e4:	b7 95       	ror	r27
 5e6:	f7 95       	ror	r31
 5e8:	e7 95       	ror	r30
 5ea:	9f 5f       	subi	r25, 0xFF	; 255
 5ec:	c1 f7       	brne	.-16     	; 0x5de <__mulsf3_pse+0x90>
 5ee:	fe 2b       	or	r31, r30
 5f0:	88 0f       	add	r24, r24
 5f2:	91 1d       	adc	r25, r1
 5f4:	96 95       	lsr	r25
 5f6:	87 95       	ror	r24
 5f8:	97 f9       	bld	r25, 7
 5fa:	08 95       	ret

000005fc <_exit>:
 5fc:	f8 94       	cli

000005fe <__stop_program>:
 5fe:	ff cf       	rjmp	.-2      	; 0x5fe <__stop_program>
