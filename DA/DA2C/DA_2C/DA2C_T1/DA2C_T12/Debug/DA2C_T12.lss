
DA2C_T12.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000104  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000982  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008d3  00000000  00000000  00000b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002aa  00000000  00000000  0000143d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000016e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000045e  00000000  00000000  0000170c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000034  00000000  00000000  00001b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001b9e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  68:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  6c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  70:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  7c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  80:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  84:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  88:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  8c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  90:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  94:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  98:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  9c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  ac:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  b0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  c4:	0c 94 80 00 	jmp	0x100	; 0x100 <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <main>:
#include <util/delay.h>

int main(void)
{
 	uint8_t OVFCount = 0; // Setup Placeholder for overflow counter
	DDRB = 0xFF; // Set Port B as an output
  cc:	8f ef       	ldi	r24, 0xFF	; 255
  ce:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x00; // Set Port C as an input
  d0:	17 b8       	out	0x07, r1	; 7
    PORTC = 0xFF; // Set Pull up resistors in Port C
  d2:	88 b9       	out	0x08, r24	; 8
	TCNT0 = 0x2; // Reset timer0 for delay
  d4:	82 e0       	ldi	r24, 0x02	; 2
  d6:	86 bd       	out	0x26, r24	; 38
	TCCR0B = (1<<CS02)|(1<<CS00); // Setting prescaler value for timer0
  d8:	85 e0       	ldi	r24, 0x05	; 5
  da:	85 bd       	out	0x25, r24	; 37
	while (1)
	{
	   OVFCount = 0; // Retain Overflow count to zero if the button has not been pushed
	   PORTB = 0b00111100; // Set LED Port B to Low (REVERSE LOGIC)
  dc:	3c e3       	ldi	r19, 0x3C	; 60
	   if(PINC == 0x7D) // If switch push is detected, then set LEDs and begin timer delay sequence
	   {
		   TCNT0 = 0x3; // Reset timer0 for delay
  de:	93 e0       	ldi	r25, 0x03	; 3
		   PORTB = 0b11111011; // Set LED Port B to High (REVERSE LOGIC)
  e0:	4b ef       	ldi	r20, 0xFB	; 251
				   // When the flag is not set, do nothing O.o and wait
				   } 
			   OVFCount++; // When flag is set, increment overflow flag counter
			   if(OVFCount < 77){
				   TCNT0 = 0x3; // Reset timer0 for delay
				   TIFR0 = 0x01; // Clearing Timer1 overflow flag
  e2:	21 e0       	ldi	r18, 0x01	; 1
	TCNT0 = 0x2; // Reset timer0 for delay
	TCCR0B = (1<<CS02)|(1<<CS00); // Setting prescaler value for timer0
	while (1)
	{
	   OVFCount = 0; // Retain Overflow count to zero if the button has not been pushed
	   PORTB = 0b00111100; // Set LED Port B to Low (REVERSE LOGIC)
  e4:	35 b9       	out	0x05, r19	; 5
	   if(PINC == 0x7D) // If switch push is detected, then set LEDs and begin timer delay sequence
  e6:	86 b1       	in	r24, 0x06	; 6
  e8:	8d 37       	cpi	r24, 0x7D	; 125
  ea:	e1 f7       	brne	.-8      	; 0xe4 <main+0x18>
	   {
		   TCNT0 = 0x3; // Reset timer0 for delay
  ec:	96 bd       	out	0x26, r25	; 38
		   PORTB = 0b11111011; // Set LED Port B to High (REVERSE LOGIC)
  ee:	45 b9       	out	0x05, r20	; 5
  f0:	8d e4       	ldi	r24, 0x4D	; 77
		   while(OVFCount < 77){
			   while((TIFR0 & 0x01) == 0){
  f2:	a8 9b       	sbis	0x15, 0	; 21
  f4:	fe cf       	rjmp	.-4      	; 0xf2 <main+0x26>
  f6:	81 50       	subi	r24, 0x01	; 1
				   // When the flag is not set, do nothing O.o and wait
				   } 
			   OVFCount++; // When flag is set, increment overflow flag counter
			   if(OVFCount < 77){
  f8:	a9 f3       	breq	.-22     	; 0xe4 <main+0x18>
				   TCNT0 = 0x3; // Reset timer0 for delay
  fa:	96 bd       	out	0x26, r25	; 38
				   TIFR0 = 0x01; // Clearing Timer1 overflow flag
  fc:	25 bb       	out	0x15, r18	; 21
  fe:	f9 cf       	rjmp	.-14     	; 0xf2 <main+0x26>

00000100 <_exit>:
 100:	f8 94       	cli

00000102 <__stop_program>:
 102:	ff cf       	rjmp	.-2      	; 0x102 <__stop_program>
