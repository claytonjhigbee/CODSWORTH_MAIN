
DA2C_T11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000108  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000981  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008d1  00000000  00000000  00000b6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c0  00000000  00000000  0000143e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001700  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000045d  00000000  00000000  00001724  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000002b  00000000  00000000  00001b81  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001bac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  68:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  6c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  70:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  7c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  80:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  84:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  88:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  8c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  90:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  94:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  98:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  9c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  ac:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  b0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  c4:	0c 94 82 00 	jmp	0x104	; 0x104 <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <main>:
#include <avr/io.h>
#define LED 2
// from vanki
int main() {
	uint8_t OVFCount = 0; // Setup Placeholder for overflow counter
	DDRB |= 1 << LED; // Configure PORTB.2 as an output
  cc:	22 9a       	sbi	0x04, 2	; 4
	TCNT0 = 0x4; // Reset timer0 for first delay
  ce:	84 e0       	ldi	r24, 0x04	; 4
  d0:	86 bd       	out	0x26, r24	; 38
	TCCR0B = (1<<CS02)|(1<<CS00); // Setting prescaler value for timer0 to 1024 and start timer
  d2:	85 e0       	ldi	r24, 0x05	; 5
  d4:	85 bd       	out	0x25, r24	; 37
	while (1){
		while((TIFR0 & 0x01) == 0){} // When the flag is not set, do nothing and wait
		OVFCount++; // Increment overflow flag counter
		// Count up during the first delay period	
		if(OVFCount < 27){
		TCNT0 = 0x4; // Reset timer0 for first delay
  d6:	24 e0       	ldi	r18, 0x04	; 4
		TIFR0 = 0x01; // Clearing Timer1 overflow flag	
  d8:	91 e0       	ldi	r25, 0x01	; 1
			TCNT0 = 0x4; // Reset timer0 for second delay
			TIFR0 = 0x01; // Clearing Timer1 overflow flag	
		}
		// If count met, set high and start delay period over 
		if(OVFCount == 45) {
			PORTB = 0xFF; // Set PinB.2 high
  da:	3f ef       	ldi	r19, 0xFF	; 255

#define F_CPU 16000000UL
#include <avr/io.h>
#define LED 2
// from vanki
int main() {
  dc:	80 e0       	ldi	r24, 0x00	; 0
	DDRB |= 1 << LED; // Configure PORTB.2 as an output
	TCNT0 = 0x4; // Reset timer0 for first delay
	TCCR0B = (1<<CS02)|(1<<CS00); // Setting prescaler value for timer0 to 1024 and start timer
	
	while (1){
		while((TIFR0 & 0x01) == 0){} // When the flag is not set, do nothing and wait
  de:	a8 9b       	sbis	0x15, 0	; 21
  e0:	fe cf       	rjmp	.-4      	; 0xde <main+0x12>
		OVFCount++; // Increment overflow flag counter
  e2:	8f 5f       	subi	r24, 0xFF	; 255
		// Count up during the first delay period	
		if(OVFCount < 27){
  e4:	8b 31       	cpi	r24, 0x1B	; 27
  e6:	10 f4       	brcc	.+4      	; 0xec <main+0x20>
		TCNT0 = 0x4; // Reset timer0 for first delay
  e8:	26 bd       	out	0x26, r18	; 38
		TIFR0 = 0x01; // Clearing Timer1 overflow flag	
  ea:	95 bb       	out	0x15, r25	; 21
		}
		// If count is met, set PinB.2 low
		if(OVFCount == 27) {
  ec:	8b 31       	cpi	r24, 0x1B	; 27
  ee:	21 f4       	brne	.+8      	; 0xf8 <main+0x2c>
			PORTB = 0x00; // Set PinB.2 Low 
  f0:	15 b8       	out	0x05, r1	; 5
		}
		// Count up for next delay
		if(27 < OVFCount < 45) {
			TCNT0 = 0x4; // Reset timer0 for second delay
  f2:	26 bd       	out	0x26, r18	; 38
			TIFR0 = 0x01; // Clearing Timer1 overflow flag	
  f4:	95 bb       	out	0x15, r25	; 21
  f6:	f3 cf       	rjmp	.-26     	; 0xde <main+0x12>
		if(OVFCount == 27) {
			PORTB = 0x00; // Set PinB.2 Low 
		}
		// Count up for next delay
		if(27 < OVFCount < 45) {
			TCNT0 = 0x4; // Reset timer0 for second delay
  f8:	26 bd       	out	0x26, r18	; 38
			TIFR0 = 0x01; // Clearing Timer1 overflow flag	
  fa:	95 bb       	out	0x15, r25	; 21
		}
		// If count met, set high and start delay period over 
		if(OVFCount == 45) {
  fc:	8d 32       	cpi	r24, 0x2D	; 45
  fe:	79 f7       	brne	.-34     	; 0xde <main+0x12>
			PORTB = 0xFF; // Set PinB.2 high
 100:	35 b9       	out	0x05, r19	; 5
 102:	ec cf       	rjmp	.-40     	; 0xdc <main+0x10>

00000104 <_exit>:
 104:	f8 94       	cli

00000106 <__stop_program>:
 106:	ff cf       	rjmp	.-2      	; 0x106 <__stop_program>
