
DA2C_T21.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000224  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009b3  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000905  00000000  00000000  00000c3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002c8  00000000  00000000  00001544  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  0000180c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000046f  00000000  00000000  00001860  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000007b  00000000  00000000  00001ccf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001d4a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 80 00 	jmp	0x100	; 0x100 <__vector_16>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a2 30       	cpi	r26, 0x02	; 2
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  d4:	0c 94 bd 00 	jmp	0x17a	; 0x17a <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <main>:
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>
volatile int OVFCount; // Setup global overflow counter 
int main(void){
	OVFCount = 0; // Initialize global overflow counter
  dc:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  e0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	DDRB = 0b100; // Configure PORTB.2 as an output
  e4:	84 e0       	ldi	r24, 0x04	; 4
  e6:	84 b9       	out	0x04, r24	; 4
	TIMSK0 |= (1<<TOIE0); // Activate Timer 0 Interrupt Flag
  e8:	ee e6       	ldi	r30, 0x6E	; 110
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	81 60       	ori	r24, 0x01	; 1
  f0:	80 83       	st	Z, r24
	TCNT0 = 56; // Desired timer initial value to count up to 255
  f2:	88 e3       	ldi	r24, 0x38	; 56
  f4:	86 bd       	out	0x26, r24	; 38
	sei(); // Activate global interrupts
  f6:	78 94       	sei
	TCCR0B |= (1<< CS02)|(1<<CS00); // Set prescalar to 1024 and starts timer
  f8:	85 b5       	in	r24, 0x25	; 37
  fa:	85 60       	ori	r24, 0x05	; 5
  fc:	85 bd       	out	0x25, r24	; 37
  fe:	ff cf       	rjmp	.-2      	; 0xfe <main+0x22>

00000100 <__vector_16>:
	}	
}

// Interrupt C Code
ISR(TIMER0_OVF_vect) // Timer0 overflow interrupt sequence
{
 100:	1f 92       	push	r1
 102:	0f 92       	push	r0
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	0f 92       	push	r0
 108:	11 24       	eor	r1, r1
 10a:	2f 93       	push	r18
 10c:	3f 93       	push	r19
 10e:	8f 93       	push	r24
 110:	9f 93       	push	r25
OVFCount++; // Increment overflow flag counter
 112:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 116:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 11a:	01 96       	adiw	r24, 0x01	; 1
 11c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 120:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
int count; // Initialize local counter
count = OVFCount; // Let local counter mimic global counter variable
 124:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 128:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
// First delay period 
if(count < 27){
 12c:	8b 31       	cpi	r24, 0x1B	; 27
 12e:	91 05       	cpc	r25, r1
 130:	24 f4       	brge	.+8      	; 0x13a <__vector_16+0x3a>
	TCNT0 = 0x4; // Reset timer0 for first delay
 132:	24 e0       	ldi	r18, 0x04	; 4
 134:	26 bd       	out	0x26, r18	; 38
	TIFR0 = 0x01; // Clearing Timer1 overflow flag
 136:	21 e0       	ldi	r18, 0x01	; 1
 138:	25 bb       	out	0x15, r18	; 21
}
// If first delay done, then set PinB.2 low
if(count == 27) {
 13a:	8b 31       	cpi	r24, 0x1B	; 27
 13c:	91 05       	cpc	r25, r1
 13e:	11 f4       	brne	.+4      	; 0x144 <__vector_16+0x44>
	PORTB = 0x00;
 140:	15 b8       	out	0x05, r1	; 5
 142:	12 c0       	rjmp	.+36     	; 0x168 <__vector_16+0x68>
}
// Second delay period
if(27 < count & count < 45) {
 144:	9c 01       	movw	r18, r24
 146:	2c 51       	subi	r18, 0x1C	; 28
 148:	31 09       	sbc	r19, r1
 14a:	21 31       	cpi	r18, 0x11	; 17
 14c:	31 05       	cpc	r19, r1
 14e:	20 f4       	brcc	.+8      	; 0x158 <__vector_16+0x58>
	TCNT0 = 0x4; // Reset timer0 for second delay
 150:	24 e0       	ldi	r18, 0x04	; 4
 152:	26 bd       	out	0x26, r18	; 38
	TIFR0 = 0x01; // Clearing Timer1 overflow flag
 154:	21 e0       	ldi	r18, 0x01	; 1
 156:	25 bb       	out	0x15, r18	; 21
}
// If second delay done, set PinB.2 low and start counter over 
if(count == 45) {
 158:	8d 97       	sbiw	r24, 0x2d	; 45
 15a:	31 f4       	brne	.+12     	; 0x168 <__vector_16+0x68>
	PORTB = 0xFF; // Set PinB.2 Low
 15c:	8f ef       	ldi	r24, 0xFF	; 255
 15e:	85 b9       	out	0x05, r24	; 5
	OVFCount = 0; // Reset Counter
 160:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 164:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
}
}
 168:	9f 91       	pop	r25
 16a:	8f 91       	pop	r24
 16c:	3f 91       	pop	r19
 16e:	2f 91       	pop	r18
 170:	0f 90       	pop	r0
 172:	0f be       	out	0x3f, r0	; 63
 174:	0f 90       	pop	r0
 176:	1f 90       	pop	r1
 178:	18 95       	reti

0000017a <_exit>:
 17a:	f8 94       	cli

0000017c <__stop_program>:
 17c:	ff cf       	rjmp	.-2      	; 0x17c <__stop_program>
