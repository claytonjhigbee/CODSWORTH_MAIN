
DA2C_T22.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000170  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000214  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009b3  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000905  00000000  00000000  00000c2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002d2  00000000  00000000  00001534  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00001808  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000470  00000000  00000000  00001850  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000061  00000000  00000000  00001cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001d21  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 94 00 	jmp	0x128	; 0x128 <__vector_16>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a2 30       	cpi	r26, 0x02	; 2
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  d4:	0c 94 b6 00 	jmp	0x16c	; 0x16c <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <main>:
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>
volatile int OVFCount;
int main(void){
	OVFCount = 0; // initialize Overflow counter
  dc:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  e0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	DDRB = 0xFF; // Configure PORTB as an output
  e4:	8f ef       	ldi	r24, 0xFF	; 255
  e6:	84 b9       	out	0x04, r24	; 4
	TIMSK0 |= (1<<TOIE0); // Activate Timer 0 Interrupt Flag
  e8:	ee e6       	ldi	r30, 0x6E	; 110
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	81 60       	ori	r24, 0x01	; 1
  f0:	80 83       	st	Z, r24
	TCNT0 = 56; // Desired timer initial value to count up to 255
  f2:	88 e3       	ldi	r24, 0x38	; 56
  f4:	86 bd       	out	0x26, r24	; 38
	sei(); // Activate global interrupts
  f6:	78 94       	sei
	TCCR0B |= (1<< CS02)|(1<<CS00); // Set prescalar to 1024 and starts timer
  f8:	85 b5       	in	r24, 0x25	; 37
  fa:	85 60       	ori	r24, 0x05	; 5
  fc:	85 bd       	out	0x25, r24	; 37
	
	while(1){
		PORTB = 0b11111111; // Set LED PortB.2 to Low (REVERSE LOGIC)
  fe:	2f ef       	ldi	r18, 0xFF	; 255
		if(PINC == 0x7D) // If switch push is detected, then set LEDs
		{
			OVFCount = 0; // initialize Overflow value for this button press
			TCNT0 = 0x2; // Reset timer0 for delay
 100:	42 e0       	ldi	r20, 0x02	; 2
			PORTB = 0xFB; // Set LED Port B to High (REVERSE LOGIC)
 102:	3b ef       	ldi	r19, 0xFB	; 251
	TCNT0 = 56; // Desired timer initial value to count up to 255
	sei(); // Activate global interrupts
	TCCR0B |= (1<< CS02)|(1<<CS00); // Set prescalar to 1024 and starts timer
	
	while(1){
		PORTB = 0b11111111; // Set LED PortB.2 to Low (REVERSE LOGIC)
 104:	25 b9       	out	0x05, r18	; 5
		if(PINC == 0x7D) // If switch push is detected, then set LEDs
 106:	86 b1       	in	r24, 0x06	; 6
 108:	8d 37       	cpi	r24, 0x7D	; 125
 10a:	e1 f7       	brne	.-8      	; 0x104 <main+0x28>
		{
			OVFCount = 0; // initialize Overflow value for this button press
 10c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 110:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			TCNT0 = 0x2; // Reset timer0 for delay
 114:	46 bd       	out	0x26, r20	; 38
			PORTB = 0xFB; // Set LED Port B to High (REVERSE LOGIC)
 116:	35 b9       	out	0x05, r19	; 5
			while(OVFCount < 77)
 118:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 11c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 120:	8d 34       	cpi	r24, 0x4D	; 77
 122:	91 05       	cpc	r25, r1
 124:	cc f3       	brlt	.-14     	; 0x118 <main+0x3c>
 126:	ee cf       	rjmp	.-36     	; 0x104 <main+0x28>

00000128 <__vector_16>:
	}
}

// Interrupt C Code
ISR(TIMER0_OVF_vect) // Timer0 overflow interrupt sequence
{
 128:	1f 92       	push	r1
 12a:	0f 92       	push	r0
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	0f 92       	push	r0
 130:	11 24       	eor	r1, r1
 132:	8f 93       	push	r24
 134:	9f 93       	push	r25
	OVFCount++; // Increment overflow flag counter
 136:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 13a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 13e:	01 96       	adiw	r24, 0x01	; 1
 140:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 144:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	int count;
	count = OVFCount;
 148:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 14c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
	if(count < 77){
 150:	8d 34       	cpi	r24, 0x4D	; 77
 152:	91 05       	cpc	r25, r1
 154:	24 f4       	brge	.+8      	; 0x15e <__vector_16+0x36>
		TCNT0 = 0x2; // Reset timer0 for delay
 156:	82 e0       	ldi	r24, 0x02	; 2
 158:	86 bd       	out	0x26, r24	; 38
		TIFR0 = 0x01; // Clearing Timer1 overflow flag
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	85 bb       	out	0x15, r24	; 21
	}
}
 15e:	9f 91       	pop	r25
 160:	8f 91       	pop	r24
 162:	0f 90       	pop	r0
 164:	0f be       	out	0x3f, r0	; 63
 166:	0f 90       	pop	r0
 168:	1f 90       	pop	r1
 16a:	18 95       	reti

0000016c <_exit>:
 16c:	f8 94       	cli

0000016e <__stop_program>:
 16e:	ff cf       	rjmp	.-2      	; 0x16e <__stop_program>
