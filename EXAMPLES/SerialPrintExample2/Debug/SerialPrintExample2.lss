
SerialPrintExample2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001fc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000280  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000af1  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a02  00000000  00000000  00000de9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003a6  00000000  00000000  000017eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  00001b94  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004c0  00000000  00000000  00001bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c0  00000000  00000000  000020b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00002174  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  68:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  6c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  70:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  7c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  80:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  84:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  88:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  8c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  90:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  94:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  98:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  9c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  ac:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  b0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  c4:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <usart_init>:
}


void usart_init (void)
{
	UCSR0B = (1<<TXEN0);
  cc:	88 e0       	ldi	r24, 0x08	; 8
  ce:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1<< UCSZ01)|(1<<UCSZ00);
  d2:	86 e0       	ldi	r24, 0x06	; 6
  d4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0L = F_CPU/16/BAUD_RATE-1;
  d8:	87 e6       	ldi	r24, 0x67	; 103
  da:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  de:	08 95       	ret

000000e0 <usart_send>:
}

void usart_send (unsigned char ch)
{
	while (! (UCSR0A & (1<<UDRE0))); 	//wait until UDR0 is empty
  e0:	e0 ec       	ldi	r30, 0xC0	; 192
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	90 81       	ld	r25, Z
  e6:	95 ff       	sbrs	r25, 5
  e8:	fd cf       	rjmp	.-6      	; 0xe4 <usart_send+0x4>
	UDR0 = ch;							//transmit ch
  ea:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  ee:	08 95       	ret

000000f0 <main>:
void usart_init ();
void usart_send (unsigned char ch);

int main (void)
{
	usart_init ();
  f0:	0e 94 66 00 	call	0xcc	; 0xcc <usart_init>
	
	ADCSRA= 0x87;			//make ADC enable and select ck/128
  f4:	87 e8       	ldi	r24, 0x87	; 135
  f6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADMUX= 0xC8;			//1.1V Vref, temp, right-justified, internal temp. sensor
  fa:	88 ec       	ldi	r24, 0xC8	; 200
  fc:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	
	while (1)
	{
		ADCSRA|=(1<<ADSC);	//start conversion
 100:	ca e7       	ldi	r28, 0x7A	; 122
 102:	d0 e0       	ldi	r29, 0x00	; 0
		while((ADCSRA&(1<<ADIF))==0);//wait for conversion to finish
		
		ADCSRA |= (1<<ADIF);

		int a = ADCL;
 104:	0f 2e       	mov	r0, r31
 106:	f8 e7       	ldi	r31, 0x78	; 120
 108:	af 2e       	mov	r10, r31
 10a:	b1 2c       	mov	r11, r1
 10c:	f0 2d       	mov	r31, r0
		a = a | (ADCH<<8);
 10e:	0f 2e       	mov	r0, r31
 110:	f9 e7       	ldi	r31, 0x79	; 121
 112:	cf 2e       	mov	r12, r31
 114:	d1 2c       	mov	r13, r1
 116:	f0 2d       	mov	r31, r0
		{
			usart_send('-');
			a *= -1;
		}
		
		usart_send((a/100)+'0');
 118:	0f 2e       	mov	r0, r31
 11a:	f4 e6       	ldi	r31, 0x64	; 100
 11c:	ef 2e       	mov	r14, r31
 11e:	f1 2c       	mov	r15, r1
 120:	f0 2d       	mov	r31, r0
		a = a % 100;
		usart_send((a/10)+'0');
 122:	0f 2e       	mov	r0, r31
 124:	fa e0       	ldi	r31, 0x0A	; 10
 126:	8f 2e       	mov	r8, r31
 128:	91 2c       	mov	r9, r1
 12a:	f0 2d       	mov	r31, r0
	ADCSRA= 0x87;			//make ADC enable and select ck/128
	ADMUX= 0xC8;			//1.1V Vref, temp, right-justified, internal temp. sensor
	
	while (1)
	{
		ADCSRA|=(1<<ADSC);	//start conversion
 12c:	88 81       	ld	r24, Y
 12e:	80 64       	ori	r24, 0x40	; 64
 130:	88 83       	st	Y, r24
		while((ADCSRA&(1<<ADIF))==0);//wait for conversion to finish
 132:	88 81       	ld	r24, Y
 134:	84 ff       	sbrs	r24, 4
 136:	fd cf       	rjmp	.-6      	; 0x132 <main+0x42>
		
		ADCSRA |= (1<<ADIF);
 138:	88 81       	ld	r24, Y
 13a:	80 61       	ori	r24, 0x10	; 16
 13c:	88 83       	st	Y, r24

		int a = ADCL;
 13e:	f5 01       	movw	r30, r10
 140:	90 81       	ld	r25, Z
		a = a | (ADCH<<8);
 142:	f6 01       	movw	r30, r12
 144:	80 81       	ld	r24, Z
 146:	29 2f       	mov	r18, r25
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	a9 01       	movw	r20, r18
 14c:	58 2b       	or	r21, r24
		
		a -= 289;
 14e:	8a 01       	movw	r16, r20
 150:	01 52       	subi	r16, 0x21	; 33
 152:	11 40       	sbci	r17, 0x01	; 1

		//sprintf(str,"%d",a);

		if(a < 0)
 154:	32 f4       	brpl	.+12     	; 0x162 <main+0x72>
		{
			usart_send('-');
 156:	8d e2       	ldi	r24, 0x2D	; 45
 158:	0e 94 70 00 	call	0xe0	; 0xe0 <usart_send>
			a *= -1;
 15c:	11 95       	neg	r17
 15e:	01 95       	neg	r16
 160:	11 09       	sbc	r17, r1
		}
		
		usart_send((a/100)+'0');
 162:	c8 01       	movw	r24, r16
 164:	b7 01       	movw	r22, r14
 166:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <__divmodhi4>
 16a:	8c 01       	movw	r16, r24
 16c:	80 e3       	ldi	r24, 0x30	; 48
 16e:	86 0f       	add	r24, r22
 170:	0e 94 70 00 	call	0xe0	; 0xe0 <usart_send>
		a = a % 100;
		usart_send((a/10)+'0');
 174:	c8 01       	movw	r24, r16
 176:	b4 01       	movw	r22, r8
 178:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <__divmodhi4>
 17c:	18 2f       	mov	r17, r24
 17e:	80 e3       	ldi	r24, 0x30	; 48
 180:	86 0f       	add	r24, r22
 182:	0e 94 70 00 	call	0xe0	; 0xe0 <usart_send>
		a = a % 10;
		usart_send((a)+'0');
 186:	80 e3       	ldi	r24, 0x30	; 48
 188:	81 0f       	add	r24, r17
 18a:	0e 94 70 00 	call	0xe0	; 0xe0 <usart_send>
		usart_send('\r');
 18e:	8d e0       	ldi	r24, 0x0D	; 13
 190:	0e 94 70 00 	call	0xe0	; 0xe0 <usart_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 194:	5f ef       	ldi	r21, 0xFF	; 255
 196:	81 ee       	ldi	r24, 0xE1	; 225
 198:	94 e0       	ldi	r25, 0x04	; 4
 19a:	51 50       	subi	r21, 0x01	; 1
 19c:	80 40       	sbci	r24, 0x00	; 0
 19e:	90 40       	sbci	r25, 0x00	; 0
 1a0:	e1 f7       	brne	.-8      	; 0x19a <main+0xaa>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <main+0xb4>
 1a4:	00 00       	nop
 1a6:	c2 cf       	rjmp	.-124    	; 0x12c <main+0x3c>

000001a8 <__divmodhi4>:
 1a8:	97 fb       	bst	r25, 7
 1aa:	07 2e       	mov	r0, r23
 1ac:	16 f4       	brtc	.+4      	; 0x1b2 <__divmodhi4+0xa>
 1ae:	00 94       	com	r0
 1b0:	07 d0       	rcall	.+14     	; 0x1c0 <__divmodhi4_neg1>
 1b2:	77 fd       	sbrc	r23, 7
 1b4:	09 d0       	rcall	.+18     	; 0x1c8 <__divmodhi4_neg2>
 1b6:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <__udivmodhi4>
 1ba:	07 fc       	sbrc	r0, 7
 1bc:	05 d0       	rcall	.+10     	; 0x1c8 <__divmodhi4_neg2>
 1be:	3e f4       	brtc	.+14     	; 0x1ce <__divmodhi4_exit>

000001c0 <__divmodhi4_neg1>:
 1c0:	90 95       	com	r25
 1c2:	81 95       	neg	r24
 1c4:	9f 4f       	sbci	r25, 0xFF	; 255
 1c6:	08 95       	ret

000001c8 <__divmodhi4_neg2>:
 1c8:	70 95       	com	r23
 1ca:	61 95       	neg	r22
 1cc:	7f 4f       	sbci	r23, 0xFF	; 255

000001ce <__divmodhi4_exit>:
 1ce:	08 95       	ret

000001d0 <__udivmodhi4>:
 1d0:	aa 1b       	sub	r26, r26
 1d2:	bb 1b       	sub	r27, r27
 1d4:	51 e1       	ldi	r21, 0x11	; 17
 1d6:	07 c0       	rjmp	.+14     	; 0x1e6 <__udivmodhi4_ep>

000001d8 <__udivmodhi4_loop>:
 1d8:	aa 1f       	adc	r26, r26
 1da:	bb 1f       	adc	r27, r27
 1dc:	a6 17       	cp	r26, r22
 1de:	b7 07       	cpc	r27, r23
 1e0:	10 f0       	brcs	.+4      	; 0x1e6 <__udivmodhi4_ep>
 1e2:	a6 1b       	sub	r26, r22
 1e4:	b7 0b       	sbc	r27, r23

000001e6 <__udivmodhi4_ep>:
 1e6:	88 1f       	adc	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	5a 95       	dec	r21
 1ec:	a9 f7       	brne	.-22     	; 0x1d8 <__udivmodhi4_loop>
 1ee:	80 95       	com	r24
 1f0:	90 95       	com	r25
 1f2:	bc 01       	movw	r22, r24
 1f4:	cd 01       	movw	r24, r26
 1f6:	08 95       	ret

000001f8 <_exit>:
 1f8:	f8 94       	cli

000001fa <__stop_program>:
 1fa:	ff cf       	rjmp	.-2      	; 0x1fa <__stop_program>
